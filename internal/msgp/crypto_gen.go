package msgp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Secret) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o = msgp.AppendMapHeader(o, uint32(len(z.Versions)))
	for za0001, za0002 := range z.Versions {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Versions", za0001)
			return
		}
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint32(o, z.N)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint32(o, z.Latest)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Secret) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
			if z.Versions == nil {
				z.Versions = make(map[string]SecretVersion, zb0002)
			} else if len(z.Versions) > 0 {
				for key := range z.Versions {
					delete(z.Versions, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 SecretVersion
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Versions")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Versions", za0001)
					return
				}
				z.Versions[za0001] = za0002
			}
		case "1":
			z.N, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "N")
				return
			}
		case "2":
			z.Latest, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latest")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Secret) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Versions != nil {
		for za0001, za0002 := range z.Versions {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 2 + msgp.Uint32Size + 2 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SecretKey) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendBytes(o, z.Value)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint(o, z.Cipher)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecretKey) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "1":
			z.Cipher, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cipher")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SecretKey) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.Value) + 2 + msgp.UintSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SecretKeyRing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	o = msgp.AppendMapHeader(o, uint32(len(z.Versions)))
	for za0001, za0002 := range z.Versions {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Versions", za0001)
			return
		}
	}
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint32(o, z.N)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendUint32(o, z.Latest)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecretKeyRing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Versions")
				return
			}
			if z.Versions == nil {
				z.Versions = make(map[string]SecretKeyVersion, zb0002)
			} else if len(z.Versions) > 0 {
				for key := range z.Versions {
					delete(z.Versions, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 SecretKeyVersion
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Versions")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Versions", za0001)
					return
				}
				z.Versions[za0001] = za0002
			}
		case "1":
			z.N, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "N")
				return
			}
		case "2":
			z.Latest, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latest")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SecretKeyRing) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Versions != nil {
		for za0001, za0002 := range z.Versions {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += 2 + msgp.Uint32Size + 2 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SecretKeyVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "0"
	o = append(o, 0x83, 0xa1, 0x30)
	// map header, size 2
	// string "0"
	o = append(o, 0x82, 0xa1, 0x30)
	o = msgp.AppendBytes(o, z.Key.Value)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint(o, z.Key.Cipher)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecretKeyVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Key")
					return
				}
				switch msgp.UnsafeString(field) {
				case "0":
					z.Key.Value, bts, err = msgp.ReadBytesBytes(bts, z.Key.Value)
					if err != nil {
						err = msgp.WrapError(err, "Key", "Value")
						return
					}
				case "1":
					z.Key.Cipher, bts, err = msgp.ReadUintBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Key", "Cipher")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Key")
						return
					}
				}
			}
		case "1":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "2":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SecretKeyVersion) Msgsize() (s int) {
	s = 1 + 2 + 1 + 2 + msgp.BytesPrefixSize + len(z.Key.Value) + 2 + msgp.UintSize + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SecretVersion) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "0"
	o = append(o, 0x84, 0xa1, 0x30)
	o = msgp.AppendBytes(o, z.Value)
	// string "1"
	o = append(o, 0xa1, 0x31)
	o = msgp.AppendUint(o, z.Type)
	// string "2"
	o = append(o, 0xa1, 0x32)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "3"
	o = append(o, 0xa1, 0x33)
	o = msgp.AppendString(o, z.CreatedBy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecretVersion) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "0":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "1":
			z.Type, bts, err = msgp.ReadUintBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "2":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "3":
			z.CreatedBy, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedBy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SecretVersion) Msgsize() (s int) {
	s = 1 + 2 + msgp.BytesPrefixSize + len(z.Value) + 2 + msgp.UintSize + 2 + msgp.TimeSize + 2 + msgp.StringPrefixSize + len(z.CreatedBy)
	return
}
