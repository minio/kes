# The address of the kes server
address: 127.0.0.1:7373

# The root identity. Root is the identity that can perform
# any operation. A root identity must be specified - either
# here as part of the config file or via a CLI argument.
root: c84cc9b91ae2399b043da7eca616048d4b4200edf2ff418d8af3835911db945d

# The TLS configuration of the kes server.
# A kes server speaks HTTP only over TLS (HTTPS).
# Therefore, a TLS private key and public certificate must be specified -
# either here as part of the config file or via CLI arguments.
tls:
  key: ./server.key   # Path to the TLS private key
  cert: ./server.cert # Path to the TLS certificate
  # The TLS proxy configuration. A TLS proxy, like nginx, sits in
  # between a kes client and the kes server and usually acts as a
  # load balancer or common API endpoint.
  # All connections from the kes client to the TLS proxy as well
  # the connections from the TLS proxy to the kes server must be
  # established over TLS.
  proxy:
    # The identities of all TLS proxies directly connected to the kes
    # server.
    #
    # Note that a TLS proxy can act as any identity (including root)
    # since it can forward arbitrary client certificates. Client certificates
    # aren't secret information and a malicious TLS proxy can fake any
    # identity it has seen before. Therefore, its critical that all TLS proxy
    # identities are secure and trusted servers.
    identities: []
    # The HTTP header sent by the TLS proxy to forward certain data
    # about the client to the kes server.
    header:
      # The HTTP header containing the URL-escaped and PEM-encoded
      # certificate of the kes client forwarded by the TLS proxy.
      cert: X-Tls-Client-Cert

# Policy definitions. A policy must have an unique name
# (i.e. [policy.<name>]) and specifies which APIs can
# be accessed (i.e. paths = [ ... ]).
#
# Each server API has an unique path. For instance,
# /v1/key/create/. A policy specifies which API paths
# can be accessed. Therefore, a policy compares the
# request URL path with all of its API path patterns.
# If the URL path matches one pattern the policy allows
# the request. 
# A policy pattern is a glob pattern - e.g. /v1/key/create/abc*
#
# A policy has zero (by default) or more assigned identities.
# When a key server receives a request it first extracts the
# identity from the TLS certificate sent by the client when
# establishing the connection. Based on this extracted identity
# the server finds the policy assigned to the identity and then
# checks whether the request is valid.

# In general, each user/application should only have the minimal
# set of policy permissions to accomplish whatever it needs to do.
# Therefore, it is recommended to define policies based on workflows
# and then assign them to the identities.
#
# The following policies are just dummy policies. Please adjust them to
# your needs:
policy:
  prod-admin:
    paths:
    - /v1/policy/show/prod-*
    - /v1/policy/list/prod-*
    - /v1/identity/assign/prod-ops/*
    - /v1/identity/assign/prod-app/*
    - /v1/identity/list/*
    - /v1/identity/forget/*
    identities:
    - 7ec8095a5308a535b72b35c7ccd4ce1d7c14af713acd22e2935a9d6e4fe18127
  prod-app:
    paths:
    - /v1/key/generate/prod-*
    - /v1/key/decrypt/prod-*
    identities:
    - df7281ca3fed4ef7d06297eb7cb9d590a4edc863b4425f4762bb2afaebfd3258
    - c0ecd5962eaf937422268b80a93dde4786dc9783fb2480ddea0f3e5fe471a731
  prod-ops:
    paths:
    - /v1/key/create/prod-*
    - /v1/key/delete/prod-*
    identities:
    - c956add675567b7a2e5011c6efe6106bc2504a71ce406299a8dd7e292d1610da

cache:
  # Cache expiry specifies when cache entries expire.
  expiry:
    # Period after which all cache entries are discarded.
    # It determines how often the kes server has to fetch
    # a secret key from the key storage.
    all: 5m0s
    # Period after which all unused cache entries are discarded.
    # It determines how often "not frequently" used secret keys
    # must be fetched from the key storage.
    unused: 20s

# Log configuration. In general, the server distinguishes
# between (operational) errors and audit events. Therefore,
# there are separate error and audit logs.
log:
  # Error log. The server can log error events to one or multiple
  # log files. If one or multiple log files already exist, the
  # server will truncate them. If no log file (path) is specified
  # the server will log errors to stderr.
  error:
    file:
    - ""  # Add one or more log file paths here.
  
  # Audit log. The server can log audit events to one or multiple
  # log files. Each audit event is a JSON object representing a
  # request-response pair that contains the time, client identity, the
  # API path, HTTP response status code etc.
  # {
  #   "time": "2006-01-02T15:04:05Z07:00",
  #   "request": {
  #     "path":     "/v1/key/create/my-app-key",
  #     "identity": "4067503933d4a78358f908a2df7ec14e554c612acf8a9d1aa29b7da4aa018ec9",
  #   },
  #   "response": {
  #     "status": 200
  #   }
  # }
  # The server will write such an audit log entry for every HTTP
  # request-response pair - including invalid requests. If no audit
  # file (path) is specified the server will not log audit events.
  # In contrast to error log, audit logging has to be enabled explicitly.
  audit:
    file:  
    - ""  # Add one or more log file paths here.

# External KMS configuration. An external KMS holds a set
# of cryptographic secret keys - which can be used to encrypt
# resp. decrypt secrets.
# The kes server will try to encrypt resp. decrypt secrets
# before storing resp. fetching them form the key store.
# If an external KMS is set the kes server will only accept
# encrypted secrets and no more plaintext secrets.
kms:
  # The AWS key management system (AWS-KMS). If set, the kes
  # server will send all secrets to AWS to encrypt resp. decrypt
  # them before / after storing resp. fetching them from the
  # key store.
  aws:
    address: "" # The AWS-KMS endpoint - e.g.: kms.us-east-2.amazonaws.com
    region: ""  # The AWS region of the Secrets Manager - e.g.: "us-east-2"
    key: ""     # The AWS-KMS key ID (CMK ID) used to encrypt new secrets.
    # The AWS credentials to authenticate to AWS-KMS.
    credentials:
      access_key: ""    # Your AWS Access Key
      secret_key: ""    # Your AWS Secret Key
      session_token: "" # Your AWS session token (usually optional)

# Key stores configuration. A key store holds secret keys.
# A server can only be configured to use one key store at
# the same time.
# If no store is explicitly specified the server will use
# a non-persistent in-memory key store.
keystore:
  # A file system key store. The secret keys will be stored
  # as files in a directory. The path must be a path to a
  # directory. If it doesn't exist the server will create
  # a new one.
  fs:
    path: "" # Path to your key storee
  # A Vault K/V key store. The server will store secret keys
  # at Vault's key-value backend. For more information see:
  # https://www.vaultproject.io/api/secret/kv/kv-v1.html
  vault:
    address: ""   # The Vault endpoint - e.g. https://127.0.0.1:8200
    name: ""      # An optional K/V prefix. The server will store keys under /kv/name/... 
    namespace: "" # An optional Vault namespace. See: https://www.vaultproject.io/docs/enterprise/namespaces/index.html
    approle:    # AppRole credentials. See: https://www.vaultproject.io/docs/auth/approle.html
      id: ""      # Your AppRole Role ID
      secret: ""  # Your AppRole Secret ID
      retry: 15s  # Duration until the server tries to re-authenticate after connection loss.
    tls:        # The Vault client TLS configuration for mTLS authentication and certificate verification  
      key: ""   # Path to the TLS client private key for mTLS authentication to Vault
      cert: ""  # Path to the TLS client certificate for mTLS authentication to Vailt
      ca: ""    # Path to one or multiple PEM Root CA certificates 
    status:       # Vault status configuration. The kes server will periodically reach out to Vault to check its status. 
      ping: 10s   # Duration until the server checks Vault's status again.
  aws:
    # The AWS Secrets Manager key store. The server will store
    # secret keys at the AWS Secrets Manager encrypted with
    # AWS-KMS. See: https://aws.amazon.com/secrets-manager
    secrets_manager:
      address: ""    # The AWS Secrets Manager endpoint - e.g.: secretsmanager.us-east-2.amazonaws.com
      region: ""     # The AWS region of the Secrets Manager - e.g.: "us-east-2"
      kms_key_id: "" # The AWS-KMS key ID used to en/decrypt secrets at the Secrets Manager. By default (if not set) the default AWS-KMS key will be used.
      # The AWS credentials to authenticate for accessing
      # secrets at AWS Secrets Manager.
      credentials:
        access_key: ""    # Your AWS Access Key
        secret_key: ""    # Your AWS Secret Key
        session_token: "" # Your AWS session token (usually optional)
