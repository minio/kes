// Code generated by go-swagger; DO NOT EDIT.

// This file is part of MinIO KES
// Copyright (c) 2023 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

package encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewListIdentitiesParams creates a new ListIdentitiesParams object
//
// There are no default values defined in the spec.
func NewListIdentitiesParams() ListIdentitiesParams {

	return ListIdentitiesParams{}
}

// ListIdentitiesParams contains all the bound params for the list identities operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListIdentities
type ListIdentitiesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*enclave to be used
	  Required: true
	  In: query
	*/
	Enclave string
	/*pattern to retrieve identities
	  In: query
	*/
	Pattern *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListIdentitiesParams() beforehand.
func (o *ListIdentitiesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEnclave, qhkEnclave, _ := qs.GetOK("enclave")
	if err := o.bindEnclave(qEnclave, qhkEnclave, route.Formats); err != nil {
		res = append(res, err)
	}

	qPattern, qhkPattern, _ := qs.GetOK("pattern")
	if err := o.bindPattern(qPattern, qhkPattern, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEnclave binds and validates parameter Enclave from query.
func (o *ListIdentitiesParams) bindEnclave(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("enclave", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("enclave", "query", raw); err != nil {
		return err
	}
	o.Enclave = raw

	return nil
}

// bindPattern binds and validates parameter Pattern from query.
func (o *ListIdentitiesParams) bindPattern(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Pattern = &raw

	return nil
}
