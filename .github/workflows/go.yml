name: Go

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master

jobs:
  ui-assets:
    name: "Generate UI Assets"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Read .nvmrc
        id: node_version
        run: echo "$(cat .nvmrc)" && echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'yarn'
          cache-dependency-path: web-app/yarn.lock
      - uses: actions/cache@v3
        id: assets-cache
        name: Assets Cache
        with:
          path: |
            ./web-app/build/
          key: ${{ runner.os }}-assets-${{ github.run_id }}
      - name: Install Dependencies
        working-directory: ./web-app
        continue-on-error: false
        run: |
          yarn install --frozen-lockfile --immutable
      - name: Check for Warnings in build output
        working-directory: ./web-app
        continue-on-error: false
        run: |
          ./check-warnings.sh
      - name: Check if Files are Prettified
        working-directory: ./web-app
        continue-on-error: false
        run: |
          ./check-prettier.sh
  build:
    name: Build
    needs:
      - ui-assets
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.5
        check-latest: true
      id: go
    - name: Check out code
      uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: assets-cache
      name: Assets Cache
      with:
        path: |
          ./web-app/build/
        key: ${{ runner.os }}-assets-${{ github.run_id }}
    - name: Build and Lint
      env:
        GO111MODULE: on
      run: |
         go build ./...
         go vet ./...
  integration-tests:
    name: Integration tests
    needs:
      - ui-assets
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.2
        check-latest: true
      id: go
    - name: Check out code
      uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: assets-cache
      name: Assets Cache
      with:
        path: |
          ./web-app/build/
        key: ${{ runner.os }}-assets-${{ github.run_id }}
    - name: Run Integration Tests
      env:
        GO111MODULE: on
      run: |
         make integration-tests
    - uses: actions/cache@v3
      id: integration-coverage-cache
      name: Integration Coverage Cache
      with:
        path: |
          ./integration-coverage.out
        key: ${{ runner.os }}-integration-coverage-${{ github.run_id }}
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: "Set up Go"
        uses: actions/setup-go@v3
        with:
          go-version: 1.20.4
        id: go
      - name: Check out code
        uses: actions/checkout@v3
      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --config ./.golangci.yml --timeout=2m
  test:
    name: Test ${{ matrix.os }}
    needs: Lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.5
        check-latest: true
      id: go
    - name: Check out code
      uses: actions/checkout@v3
    - name: Test
      env:
        GO111MODULE: on
      run: |
         go test $(go list ./... | grep -v integration)
  
  vulncheck:
    name: Vulncheck
    needs: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: 1.20.5
        check-latest: true
    - name: Get govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      shell: bash
    - name: Run govulncheck
      run: govulncheck ./...
      shell: bash
  coverage:
    name: "Coverage Threshold"
    needs:
      - integration-tests
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.2
        check-latest: true
      id: go
    - name: Check out code
      uses: actions/checkout@v3
    - name: Checkout gocovmerge
      uses: actions/checkout@v3
      with:
        repository: wadey/gocovmerge
        path: gocovmerge
    - uses: actions/cache@v3
      id: integration-coverage-cache
      name: Integration Coverage Cache
      with:
        path: |
          ./integration-coverage.out
        key: ${{ runner.os }}-integration-coverage-${{ github.run_id }}

    - name: Get coverage
      run: |
        make get-coverage
